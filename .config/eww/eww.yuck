(defwidget bar []
	(box :class {transparency == "" ? "opaque" : transparency}
		(centerbox :orientation "h"
			(left)
			(middle)
			(right)
		)
	)
)

(defwidget left []
	(box :class "left" :orientation "h" :space-evenly false :halign "start"
		(workspaces)
		(revealer :reveal {EWW_NET["wlp2s0"]["NET_UP"] == 0 && EWW_NET["wlp2s0"]["NET_DOWN"] == 0} :transition "slideright" :duration "1s"
			(disks)
		)
		(revealer :reveal {EWW_NET["wlp2s0"]["NET_UP"] > 0 || EWW_NET["wlp2s0"]["NET_DOWN"] > 0} :transition "slideright" :duration "1s"
			(network)
		)
	)
)

(defwidget middle []
	(box :class "middle" :orientation "h" :space-evenly true :halign "start" :spacing 0
		(text-icons)
	)
)

(defwidget right []
 	(box :class "right" :orientation "h" :space-evenly false :halign "end"
		(metric :class "" :label "" :value {round(EWW_CPU.avg, 0)} :onchange "")
		(metric :class "" :label "" :value {round(EWW_RAM.used_mem_perc, 0)} :onchange "")
		(volume :class {muted == 0 ? "muted" : "unset"})
		(temperature)
		(weather)
		(connection)
		(box :class "user" user)
	)
)

(defwidget workspaces []
	(box :class "workspaces" :orientation "h" :space-evenly false :halign "start" :spacing 0	
		(button :onclick "bspc desktop -f ^1" {workspace == "I" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^2" {workspace == "II" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^3" {workspace == "III" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^4" {workspace == "IV" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^5" {workspace == "V" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^6" {workspace == "VI" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^7" {workspace == "VII" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^8" {workspace == "VIII" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^9" {workspace == "IX" ? "●" : "○"})
		(button :onclick "bspc desktop -f ^10" {workspace == "X" ? "●" : "○"})
	)
)

(defwidget disks []
	(box :class "disks" :space-evenly false
		(box :class "label" "")
		(for n in '${disks}'
			(disk :value '${n}')
		)
	)
)

(defwidget network []
	(box :class "network" :space-evenly false
		(box :class "label" "")
		(box :class "value" :space-evenly false
			{round(EWW_NET["wlp2s0"]["NET_UP"]/1024, 1)} "Kb/s"
		)

		(box :class "font-icon label" "")
		(box :class "value" :space-evenly false
			{round(EWW_NET["wlp2s0"]["NET_DOWN"]/1024, 1)} "Kb/s"
		)
	)
)

(defwidget text-icons []
	(box :class "icons" :space-evenly false
		(button :class "icon icon-small" :onclick "flatpak run org.chromium.Chromium &" "")
		(button :class "icon icon-small" :onclick "flatpak run io.gitlab.librewolf-community &" "")
		(button :class "icon" :onclick "urxvt -name float &" "")
		(button :class "icon" :onclick "thunar ~ &" "")
		(button :class "icon" :onclick "thunar trash:// &" "")
	)
)

(defwidget icons []
	(box :space-evenly false
		(icon :name "google-chrome" :onclick "flatpak run org.chromium.Chromium &")
		(icon :name "firefox" :onclick "flatpak run io.gitlab.librewolf-community &")
		(icon :name "org.xfce.terminalemulator" :onclick "urxvt -name float &")
		(icon :name "org.xfce.panel.directorymenu" :onclick "thunar &")
		(icon :name "trashindicator" :onclick "thunar trash:// &")
	)
)

(defwidget volume  [?class]
	(box :class "metric" :space-evenly false
		(button :class "volume label" :onclick "amixer -q -D pulse set Master 1+ toggle" volume-icon)
		(scale :class "${class}" :min 0 :max 101 :value volume :onchange "amixer -D pulse sset Master {}%")
		(box :class "" "${volume}%")
	)
)

(defwidget temperature []
	(box :space-evenly false
		(eventbox :onhover "eww update show-temperature=true" :onhoverlost "eww update show-temperature=false"
			(box :space-evenly false
				(box :class "label" "")
				(revealer :reveal {show-temperature} :transition "slideright" :duration "1s"
					(box :class "value"
						{EWW_TEMPS["CORETEMP_CORE_0"]} "°C"
					)
				)
			)
		)
	)
)

(defwidget weather []
	(box :space-evenly false
		(eventbox :onhover "eww update show-weather=true" :onhoverlost "eww update show-weather=false"
			(box :space-evenly false
				(box :class "label" weather-icon)
				(revealer :reveal {show-weather} :transition "slideright" :duration "1s"
					(box :class "value" weather-temp)
				)
			)
		)
	)
)

(defwidget connection []
	(box :class "label"
		(button :class "connection" :onclick "scripts/connection-switch" {connected == "connected" ? "" : ""})
	)
)

(defwidget metric [label value onchange ?class]
	(box :class "metric" :space-evenly false :spacing 0
		(box :class "label" label)
		(scale :class "${class}" :min 0 :max 101 :value value :onchange onchange)
		(box :class "" "${value}%")
	)
)

(defwidget disk [value]
	(box :class "disk metric" :space-evenly false
		(scale :min 0 :max 101 :value value)
		value
		"%"
	)
)

(defwidget icon [name ?onclick]
	(box :space-evenly false
		(button :class "icon" :onclick onclick
			(image :path "${papirus}/${name}.svg" :image-width 23 :image-height 23)
		)
	)
)

(defvar papirus "/usr/share/icons/Papirus/32x32/apps")
(defvar show-weather false)
(defvar show-temperature false)

(defpoll connected :interval "10s" "scripts/connected")
(defpoll disks :interval "60s" "scripts/disks")
(defpoll volume :interval "11s" "scripts/volume")
(defpoll volume-icon :interval "12s" "scripts/volume-icon")
(defpoll workspace :interval "8s" "scripts/workspaces")
(defpoll user :interval "1200s" "echo $USER")
(defpoll muted :interval "13s" "scripts/muted")
(defpoll weather-icon :interval "1200s" "curl -s --connect-timeout 10 wttr.in?format=%c | grep -v curl | grep -v Unk | xargs")
(defpoll weather-temp :interval "1200s" "curl -s --connect-timeout 10 wttr.in?format=%t | grep -v curl | grep -v Unk | xargs")
(defpoll transparency :interval "9s" "cat ~/.transparency")
(defpoll time :interval "61s" 'date +"%T" | rev |cut -c4- | rev')

(defwindow main :monitor 0 :windowtype "normal" :wm-ignore false :geometry 
	(geometry :x "5px" :y "5px" :width "99.26793557833089%" :height "33px")
  	(bar)
)

(defwindow fill :monitor 0 :windowtype "desktop" :wm-ignore false :geometry
	(geometry :x "0%" :y "0%" :width "100%" :height "32px") 
	(bar)
)

(defwindow clock :monitor 0 :windowtype "desktop" :wm-ignore false :geometry 
	(geometry :x "0%" :y "3%" :width "100%" :height "0%")
	(box :spacing 0 :space-evenly false :orientation "v"
		time
	)
)

(defwindow traffic :monitor 0 :windowtype "desktop" :wm-ignore false :geometry 
	(geometry :x "0%" :y "18%" :width "100%" :height "0%")
	(centerbox
		(box)
		(network)
		(box)
	)
)

(defwindow workspace-bar :monitor 0 :windowtype "desktop" :wm-ignore false :geometry
	(geometry :x "1%" :y "2%" :width "99%" :height "32px") 
	(centerbox :orientation "h"
		(workspaces)
		(box)
		(box)
	)
)

(defwindow icon-bar :monitor 0 :windowtype "desktop" :wm-ignore false :geometry
	(geometry :x "0%" :y "93%" :width "100%" :height "32px") 
	(centerbox
		(box)
		(box :class "icons" :space-evenly false
			(button :class "icon icon-small" :onclick "flatpak run org.chromium.Chromium &" "")
			(button :class "icon icon-small" :onclick "flatpak run io.gitlab.librewolf-community &" "")
			(button :class "icon" :onclick "urxvt -name float &" "")
			(button :class "icon" :onclick "thunar ~ &" "")
			(button :class "icon" :onclick "thunar trash:// &" "")
		)
		(box)
	)
)
